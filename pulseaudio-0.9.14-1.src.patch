--- origsrc/pulseaudio-0.9.14/src/Makefile.am	2009-01-12 17:11:38.000000000 -0600
+++ src/pulseaudio-0.9.14/src/Makefile.am	2009-03-04 00:57:42.054750000 -0600
@@ -66,7 +66,7 @@ AM_LIBADD = $(PTHREAD_LIBS) $(INTLLIBS)
 AM_LDADD = $(PTHREAD_LIBS) $(INTLLIBS)
 
 # Only required on some platforms but defined for all to avoid errors
-AM_LDFLAGS = -Wl,-no-undefined -Wl,--gc-sections -Wl,-z,nodelete
+AM_LDFLAGS = -Wl,--no-undefined -Wl,--gc-sections 
 
 if STATIC_BINS
 BINLDFLAGS = -static
@@ -77,17 +77,17 @@ AM_LDFLAGS+=-Wl,--export-all-symbols
 WINSOCK_LIBS=-lwsock32 -lws2_32 -lwininet
 endif
 
-if OS_IS_WIN32
+#if OS_IS_WIN32
 PA_THREAD_OBJS = \
 		pulsecore/mutex-win32.c pulsecore/mutex.h \
 		pulsecore/thread-win32.c pulsecore/thread.h \
 		pulsecore/semaphore-win32.c pulsecore/semaphore.h
-else
-PA_THREAD_OBJS = \
-		pulsecore/mutex-posix.c pulsecore/mutex.h \
-		pulsecore/thread-posix.c pulsecore/thread.h \
-		pulsecore/semaphore-posix.c pulsecore/semaphore.h
-endif
+#else
+#PA_THREAD_OBJS = \
+#		pulsecore/mutex-posix.c pulsecore/mutex.h \
+#		pulsecore/thread-posix.c pulsecore/thread.h \
+#		pulsecore/semaphore-posix.c pulsecore/semaphore.h
+#endif
 
 ###################################
 #          Extra files            #
@@ -261,7 +261,6 @@ noinst_PROGRAMS = \
 		remix-test \
 		envelope-test \
 		proplist-test \
-		rtstutter \
 		stripnul \
 		lock-autospawn-test \
 		prioq-test
--- origsrc/pulseaudio-0.9.14/src/daemon/cpulimit.c	2009-01-12 17:10:34.000000000 -0600
+++ src/pulseaudio-0.9.14/src/daemon/cpulimit.c	2009-03-03 23:45:37.492250000 -0600
@@ -103,7 +103,9 @@ static void reset_cpu_time(int t) {
     pa_assert_se(getrlimit(RLIMIT_CPU, &rl) >= 0);
 
     rl.rlim_cur = (rlim_t) n;
+#ifndef __CYGWIN__
     pa_assert_se(setrlimit(RLIMIT_CPU, &rl) >= 0);
+#endif
 }
 
 /* A simple, thread-safe puts() work-alike */
--- origsrc/pulseaudio-0.9.14/src/daemon/main.c	2009-01-12 17:11:38.000000000 -0600
+++ src/pulseaudio-0.9.14/src/daemon/main.c	2009-03-03 22:34:25.898500000 -0600
@@ -294,7 +294,9 @@ static void set_all_rlimits(const pa_dae
     set_one_rlimit(&conf->rlimit_data, RLIMIT_DATA, "RLIMIT_DATA");
     set_one_rlimit(&conf->rlimit_stack, RLIMIT_STACK, "RLIMIT_STACK");
     set_one_rlimit(&conf->rlimit_core, RLIMIT_CORE, "RLIMIT_CORE");
+#ifdef RLIMIT_RSS
     set_one_rlimit(&conf->rlimit_rss, RLIMIT_RSS, "RLIMIT_RSS");
+#endif
 #ifdef RLIMIT_NPROC
     set_one_rlimit(&conf->rlimit_nproc, RLIMIT_NPROC, "RLIMIT_NPROC");
 #endif
--- origsrc/pulseaudio-0.9.14/src/modules/module-detect.c	2009-01-12 17:10:34.000000000 -0600
+++ src/pulseaudio-0.9.14/src/modules/module-detect.c	2009-03-04 00:23:18.773500000 -0600
@@ -123,6 +123,7 @@ static int detect_oss(pa_core *c, int ju
     FILE *f;
     int n = 0, b = 0;
 
+#ifndef __CYGWIN__
     if (!(f = fopen("/dev/sndstat", "r")) &&
         !(f = fopen("/proc/sndstat", "r")) &&
         !(f = fopen("/proc/asound/oss/sndstat", "r"))) {
@@ -132,6 +133,7 @@ static int detect_oss(pa_core *c, int ju
 
         return -1;
     }
+#endif
 
     while (!feof(f)) {
         char line[64], args[64];
--- origsrc/pulseaudio-0.9.14/src/modules/module-protocol-stub.c	2009-01-12 17:10:34.000000000 -0600
+++ src/pulseaudio-0.9.14/src/modules/module-protocol-stub.c	2009-03-03 22:15:29.492250000 -0600
@@ -299,10 +299,14 @@ int pa__init(pa_module*m) {
     listen_on = pa_modargs_get_value(ma, "listen", NULL);
 
     if (listen_on) {
+#ifdef HAVE_GETADDRINFO
         u->socket_server_ipv6 = pa_socket_server_new_ipv6_string(m->core->mainloop, listen_on, (uint16_t) port, TCPWRAP_SERVICE);
+#endif
         u->socket_server_ipv4 = pa_socket_server_new_ipv4_string(m->core->mainloop, listen_on, (uint16_t) port, TCPWRAP_SERVICE);
     } else {
+#ifdef HAVE_GETADDRINFO
         u->socket_server_ipv6 = pa_socket_server_new_ipv6_any(m->core->mainloop, (uint16_t) port, TCPWRAP_SERVICE);
+#endif
         u->socket_server_ipv4 = pa_socket_server_new_ipv4_any(m->core->mainloop, (uint16_t) port, TCPWRAP_SERVICE);
     }
 
--- origsrc/pulseaudio-0.9.14/src/modules/rtp/module-rtp-recv.c	2009-01-12 17:10:34.000000000 -0600
+++ src/pulseaudio-0.9.14/src/modules/rtp/module-rtp-recv.c	2009-03-03 22:30:24.117250000 -0600
@@ -373,11 +373,13 @@ static int mcast_socket(const struct soc
         memset(&mr4, 0, sizeof(mr4));
         mr4.imr_multiaddr = ((const struct sockaddr_in*) sa)->sin_addr;
         r = setsockopt(fd, IPPROTO_IP, IP_ADD_MEMBERSHIP, &mr4, sizeof(mr4));
+#ifdef HAVE_GETADDRINFO
     } else {
         struct ipv6_mreq mr6;
         memset(&mr6, 0, sizeof(mr6));
         mr6.ipv6mr_multiaddr = ((const struct sockaddr_in6*) sa)->sin6_addr;
         r = setsockopt(fd, IPPROTO_IPV6, IPV6_JOIN_GROUP, &mr6, sizeof(mr6));
+#endif
     }
 
     if (r < 0) {
@@ -608,7 +610,9 @@ int pa__init(pa_module*m) {
     struct userdata *u;
     pa_modargs *ma = NULL;
     struct sockaddr_in sa4;
+#ifdef HAVE_GETADDRINFO
     struct sockaddr_in6 sa6;
+#endif
     struct sockaddr *sa;
     socklen_t salen;
     const char *sap_address;
@@ -624,12 +628,15 @@ int pa__init(pa_module*m) {
 
     sap_address = pa_modargs_get_value(ma, "sap_address", DEFAULT_SAP_ADDRESS);
 
+#ifdef HAVE_GETADDRINFO
     if (inet_pton(AF_INET6, sap_address, &sa6.sin6_addr) > 0) {
         sa6.sin6_family = AF_INET6;
         sa6.sin6_port = htons(SAP_PORT);
         sa = (struct sockaddr*) &sa6;
         salen = sizeof(sa6);
-    } else if (inet_pton(AF_INET, sap_address, &sa4.sin_addr) > 0) {
+    } else
+#endif
+   if (inet_pton(AF_INET, sap_address, &sa4.sin_addr) > 0) {
         sa4.sin_family = AF_INET;
         sa4.sin_port = htons(SAP_PORT);
         sa = (struct sockaddr*) &sa4;
--- origsrc/pulseaudio-0.9.14/src/modules/rtp/module-rtp-send.c	2009-01-12 17:11:38.000000000 -0600
+++ src/pulseaudio-0.9.14/src/modules/rtp/module-rtp-send.c	2009-03-03 22:27:08.601625000 -0600
@@ -177,7 +177,9 @@ int pa__init(pa_module*m) {
     pa_sample_spec ss;
     pa_channel_map cm;
     struct sockaddr_in sa4, sap_sa4;
+#ifdef HAVE_GETADDRINFO
     struct sockaddr_in6 sa6, sap_sa6;
+#endif
     struct sockaddr_storage sa_dst;
     pa_source_output *o = NULL;
     uint8_t payload;
@@ -247,12 +249,15 @@ int pa__init(pa_module*m) {
 
     dest = pa_modargs_get_value(ma, "destination", DEFAULT_DESTINATION);
 
+#ifdef HAVE_GETADDRINFO
     if (inet_pton(AF_INET6, dest, &sa6.sin6_addr) > 0) {
         sa6.sin6_family = af = AF_INET6;
         sa6.sin6_port = htons((uint16_t) port);
         sap_sa6 = sa6;
         sap_sa6.sin6_port = htons(SAP_PORT);
-    } else if (inet_pton(AF_INET, dest, &sa4.sin_addr) > 0) {
+    } else
+#endif
+    if (inet_pton(AF_INET, dest, &sa4.sin_addr) > 0) {
         sa4.sin_family = af = AF_INET;
         sa4.sin_port = htons((uint16_t) port);
         sap_sa4 = sa4;
@@ -267,7 +272,11 @@ int pa__init(pa_module*m) {
         goto fail;
     }
 
+#ifdef HAVE_GETADDRINFO
     if (connect(fd, af == AF_INET ? (struct sockaddr*) &sa4 : (struct sockaddr*) &sa6, (socklen_t) (af == AF_INET ? sizeof(sa4) : sizeof(sa6))) < 0) {
+#else
+    if (connect(fd, (struct sockaddr*) &sa4, (socklen_t) (sizeof(sa4))) < 0) {
+#endif
         pa_log("connect() failed: %s", pa_cstrerror(errno));
         goto fail;
     }
@@ -277,7 +286,11 @@ int pa__init(pa_module*m) {
         goto fail;
     }
 
+#ifdef HAVE_GETADDRINFO
     if (connect(sap_fd, af == AF_INET ? (struct sockaddr*) &sap_sa4 : (struct sockaddr*) &sap_sa6, (socklen_t) (af == AF_INET ? sizeof(sap_sa4) : sizeof(sap_sa6))) < 0) {
+#else
+    if (connect(sap_fd, (struct sockaddr*) &sap_sa4, (socklen_t) (sizeof(sap_sa4))) < 0) {
+#endif
         pa_log("connect() failed: %s", pa_cstrerror(errno));
         goto fail;
     }
@@ -358,8 +371,13 @@ int pa__init(pa_module*m) {
     n = pa_sprintf_malloc("PulseAudio RTP Stream on %s", pa_get_fqdn(hn, sizeof(hn)));
 
     p = pa_sdp_build(af,
+#ifdef HAVE_GETADDRINFO
                      af == AF_INET ? (void*) &((struct sockaddr_in*) &sa_dst)->sin_addr : (void*) &((struct sockaddr_in6*) &sa_dst)->sin6_addr,
                      af == AF_INET ? (void*) &sa4.sin_addr : (void*) &sa6.sin6_addr,
+#else
+                     (void*) &((struct sockaddr_in*) &sa_dst)->sin_addr,
+                     (void*) &sa4.sin_addr,
+#endif
                      n, (uint16_t) port, payload, &ss);
 
     pa_xfree(n);
--- origsrc/pulseaudio-0.9.14/src/modules/rtp/rtp.c	2009-01-12 17:10:34.000000000 -0600
+++ src/pulseaudio-0.9.14/src/modules/rtp/rtp.c	2009-03-03 22:00:00.882875000 -0600
@@ -42,6 +42,10 @@
 
 #include "rtp.h"
 
+#ifndef MSG_DONTWAIT
+#define MSG_DONTWAIT 0
+#endif
+
 pa_rtp_context* pa_rtp_context_init_send(pa_rtp_context *c, int fd, uint32_t ssrc, uint8_t payload, size_t frame_size) {
     pa_assert(c);
     pa_assert(fd >= 0);
--- origsrc/pulseaudio-0.9.14/src/modules/rtp/sap.c	2009-01-12 17:10:34.000000000 -0600
+++ src/pulseaudio-0.9.14/src/modules/rtp/sap.c	2009-03-03 22:07:07.492250000 -0600
@@ -48,6 +48,10 @@
 #include "sap.h"
 #include "sdp.h"
 
+#ifndef MSG_DONTWAIT
+#define MSG_DONTWAIT 0
+#endif
+
 #define MIME_TYPE "application/sdp"
 
 pa_sap_context* pa_sap_context_init_send(pa_sap_context *c, int fd, char *sdp_data) {
@@ -83,17 +87,27 @@ int pa_sap_send(pa_sap_context *c, pa_bo
         return -1;
     }
 
+#ifdef HAVE_GETADDRINFO
     pa_assert(sa->sa_family == AF_INET || sa->sa_family == AF_INET6);
+#else
+    pa_assert(sa->sa_family == AF_INET);
+#endif
 
     header = htonl(((uint32_t) 1 << 29) |
+#ifdef HAVE_GETADDRINFO
                    (sa->sa_family == AF_INET6 ? (uint32_t) 1 << 28 : 0) |
+#endif
                    (goodbye ? (uint32_t) 1 << 26 : 0) |
                    (c->msg_id_hash));
 
     iov[0].iov_base = &header;
     iov[0].iov_len = sizeof(header);
 
+#ifdef HAVE_GETADDRINFO
     iov[1].iov_base = sa->sa_family == AF_INET ? (void*) &((struct sockaddr_in*) sa)->sin_addr : (void*) &((struct sockaddr_in6*) sa)->sin6_addr;
+#else
+    iov[1].iov_base = (void*) &((struct sockaddr_in*) sa)->sin_addr;
+#endif
     iov[1].iov_len = sa->sa_family == AF_INET ? 4U : 16U;
 
     iov[2].iov_base = (char*) MIME_TYPE;
--- origsrc/pulseaudio-0.9.14/src/modules/rtp/sdp.c	2009-01-12 17:10:34.000000000 -0600
+++ src/pulseaudio-0.9.14/src/modules/rtp/sdp.c	2009-03-03 22:03:23.851625000 -0600
@@ -48,7 +48,11 @@ char *pa_sdp_build(int af, const void *s
 
     pa_assert(src);
     pa_assert(dst);
+#ifdef HAVE_GETADDRINFO
     pa_assert(af == AF_INET || af == AF_INET6);
+#else
+    pa_assert(af == AF_INET);
+#endif
 
     pa_assert_se(f = pa_rtp_format_to_string(ss->format));
 
@@ -162,6 +166,7 @@ pa_sdp_info *pa_sdp_parse(const char *t,
             ((struct sockaddr_in*) &i->sa)->sin_family = AF_INET;
             ((struct sockaddr_in*) &i->sa)->sin_port = 0;
             i->salen = sizeof(struct sockaddr_in);
+#ifdef HAVE_GETADDRINFO
         } else if (pa_startswith(t, "c=IN IP6 ")) {
             char a[64];
             size_t k;
@@ -179,6 +184,7 @@ pa_sdp_info *pa_sdp_parse(const char *t,
             ((struct sockaddr_in6*) &i->sa)->sin6_family = AF_INET6;
             ((struct sockaddr_in6*) &i->sa)->sin6_port = 0;
             i->salen = sizeof(struct sockaddr_in6);
+#endif
         } else if (pa_startswith(t, "m=audio ")) {
 
             if (i->payload > 127) {
@@ -239,8 +245,10 @@ pa_sdp_info *pa_sdp_parse(const char *t,
 
     if (((struct sockaddr*) &i->sa)->sa_family == AF_INET)
         ((struct sockaddr_in*) &i->sa)->sin_port = htons(port);
+#ifdef HAVE_GETADDRINFO
     else
         ((struct sockaddr_in6*) &i->sa)->sin6_port = htons(port);
+#endif
 
     return i;
 
--- origsrc/pulseaudio-0.9.14/src/pulsecore/core-util.c	2009-01-12 17:11:38.000000000 -0600
+++ src/pulseaudio-0.9.14/src/pulsecore/core-util.c	2009-03-03 23:24:41.351625000 -0600
@@ -1416,7 +1416,7 @@ char *pa_get_runtime_dir(void) {
         goto fail;
     }
 
-    k = pa_sprintf_malloc("%s" PA_PATH_SEP "%s:runtime", d, mid);
+    k = pa_sprintf_malloc("%s" PA_PATH_SEP "%s.runtime", d, mid);
     pa_xfree(d);
     pa_xfree(mid);
 
--- origsrc/pulseaudio-0.9.14/src/pulsecore/ipacl.c	2009-01-12 17:10:34.000000000 -0600
+++ src/pulseaudio-0.9.14/src/pulsecore/ipacl.c	2009-03-03 21:55:44.523500000 -0600
@@ -62,7 +62,9 @@ struct acl_entry {
     PA_LLIST_FIELDS(struct acl_entry);
     int family;
     struct in_addr address_ipv4;
+#ifdef HAVE_GETADDRINFO
     struct in6_addr address_ipv6;
+#endif
     int bits;
 };
 
@@ -109,6 +111,7 @@ pa_ip_acl* pa_ip_acl_new(const char *s) 
             if (e.bits < 32 && (uint32_t) (ntohl(e.address_ipv4.s_addr) << e.bits) != 0)
                 pa_log_warn("Host part of ACL entry '%s/%u' is not zero!", a, e.bits);
 
+#ifdef HAVE_GETADDRINFO
         } else if (inet_pton(AF_INET6, a, &e.address_ipv6) > 0) {
 
             e.bits = bits == (uint32_t) -1 ? 128 : (int) bits;
@@ -138,6 +141,7 @@ pa_ip_acl* pa_ip_acl_new(const char *s) 
                 if (t)
                     pa_log_warn("Host part of ACL entry '%s/%u' is not zero!", a, e.bits);
             }
+#endif
 
         } else {
             pa_log_warn("Failed to parse address: %s", a);
@@ -183,14 +187,20 @@ int pa_ip_acl_check(pa_ip_acl *acl, int 
     if (getpeername(fd, (struct sockaddr*) &sa, &salen) < 0)
         return -1;
 
-    if (sa.ss_family != AF_INET && sa.ss_family != AF_INET6)
+    if (sa.ss_family != AF_INET
+#ifdef HAVE_GETADDRINFO
+        && sa.ss_family != AF_INET6
+#endif
+)
         return -1;
 
     if (sa.ss_family == AF_INET && salen != sizeof(struct sockaddr_in))
         return -1;
 
+#ifdef HAVE_GETADDRINFO
     if (sa.ss_family == AF_INET6 && salen != sizeof(struct sockaddr_in6))
         return -1;
+#endif
 
     for (e = acl->entries; e; e = e->next) {
 
@@ -203,6 +213,7 @@ int pa_ip_acl_check(pa_ip_acl *acl, int 
             if (e->bits == 0 || /* this needs special handling because >> takes the right-hand side modulo 32 */
                 (ntohl(sai->sin_addr.s_addr ^ e->address_ipv4.s_addr) >> (32 - e->bits)) == 0)
                 return 1;
+#ifdef HAVE_GETADDRINFO
         } else if (e->family == AF_INET6) {
             int i, bits ;
             struct sockaddr_in6 *sai = (struct sockaddr_in6*) &sa;
@@ -230,6 +241,7 @@ int pa_ip_acl_check(pa_ip_acl *acl, int 
                 if (bits == 0)
                     return 1;
             }
+#endif
         }
     }
 
--- origsrc/pulseaudio-0.9.14/src/pulsecore/macro.h	2009-01-12 17:10:34.000000000 -0600
+++ src/pulseaudio-0.9.14/src/pulsecore/macro.h	2009-03-03 19:51:10.664125000 -0600
@@ -51,7 +51,7 @@
 #elif defined(PAGESIZE)
 #define PA_PAGE_SIZE ((size_t) PAGESIZE)
 #elif defined(HAVE_SYSCONF)
-#define PA_PAGE_SIZE ((size_t) (sysconf(_SC_PAGE_SIZE)))
+#define PA_PAGE_SIZE ((size_t) (sysconf(_SC_PAGESIZE)))
 #else
 /* Let's hope it's like x86. */
 #define PA_PAGE_SIZE ((size_t) 4096)
--- origsrc/pulseaudio-0.9.14/src/pulsecore/mutex-win32.c	2009-01-12 17:10:34.000000000 -0600
+++ src/pulseaudio-0.9.14/src/pulsecore/mutex-win32.c	2009-03-03 23:42:39.398500000 -0600
@@ -90,9 +90,12 @@ void pa_cond_signal(pa_cond *c, int broa
     if (pa_hashmap_size(c->wait_events) == 0)
         return;
 
+#if 0
     if (broadcast)
         SetEvent(pa_hashmap_get_first(c->wait_events));
     else {
+#endif
+    {
         void *iter;
         const void *key;
         HANDLE event;
--- origsrc/pulseaudio-0.9.14/src/pulsecore/rtsig.c	2009-01-12 17:10:34.000000000 -0600
+++ src/pulseaudio-0.9.14/src/pulsecore/rtsig.c	2009-03-03 23:28:32.211000000 -0600
@@ -34,7 +34,7 @@
 
 #include "rtsig.h"
 
-#ifdef SIGRTMIN
+#if 0 //def SIGRTMIN
 
 static void _free_rtsig(void *p) {
     pa_rtsig_put(PA_PTR_TO_INT(p));
--- origsrc/pulseaudio-0.9.14/src/pulsecore/socket-client.c	2009-01-12 17:10:34.000000000 -0600
+++ src/pulseaudio-0.9.14/src/pulsecore/socket-client.c	2009-03-03 21:20:58.648500000 -0600
@@ -52,6 +52,11 @@
 #include <asyncns.h>
 #endif
 
+#ifndef HAVE_GETADDRINFO
+#include <dummyin6.h>
+#include <getaddrinfo.h>
+#endif
+
 #include <pulse/timeval.h>
 #include <pulse/xmalloc.h>
 
--- origsrc/pulseaudio-0.9.14/src/pulsecore/socket-server.c	2009-01-12 17:10:34.000000000 -0600
+++ src/pulseaudio-0.9.14/src/pulsecore/socket-server.c	2009-03-03 21:52:55.070375000 -0600
@@ -289,6 +289,7 @@ fail:
     return NULL;
 }
 
+#ifdef HAVE_GETADDRINFO
 pa_socket_server* pa_socket_server_new_ipv6(pa_mainloop_api *m, const uint8_t address[16], uint16_t port, const char *tcpwrap_service) {
     pa_socket_server *ss;
     int fd = -1;
@@ -347,6 +348,7 @@ fail:
 
     return NULL;
 }
+#endif
 
 pa_socket_server* pa_socket_server_new_ipv4_loopback(pa_mainloop_api *m, uint16_t port, const char *tcpwrap_service) {
     pa_assert(m);
@@ -355,12 +357,14 @@ pa_socket_server* pa_socket_server_new_i
     return pa_socket_server_new_ipv4(m, INADDR_LOOPBACK, port, tcpwrap_service);
 }
 
+#ifdef HAVE_GETADDRINFO
 pa_socket_server* pa_socket_server_new_ipv6_loopback(pa_mainloop_api *m, uint16_t port, const char *tcpwrap_service) {
     pa_assert(m);
     pa_assert(port > 0);
 
     return pa_socket_server_new_ipv6(m, in6addr_loopback.s6_addr, port, tcpwrap_service);
 }
+#endif
 
 pa_socket_server* pa_socket_server_new_ipv4_any(pa_mainloop_api *m, uint16_t port, const char *tcpwrap_service) {
     pa_assert(m);
@@ -369,12 +373,14 @@ pa_socket_server* pa_socket_server_new_i
     return pa_socket_server_new_ipv4(m, INADDR_ANY, port, tcpwrap_service);
 }
 
+#ifdef HAVE_GETADDRINFO
 pa_socket_server* pa_socket_server_new_ipv6_any(pa_mainloop_api *m, uint16_t port, const char *tcpwrap_service) {
     pa_assert(m);
     pa_assert(port > 0);
 
     return pa_socket_server_new_ipv6(m, in6addr_any.s6_addr, port, tcpwrap_service);
 }
+#endif
 
 pa_socket_server* pa_socket_server_new_ipv4_string(pa_mainloop_api *m, const char *name, uint16_t port, const char *tcpwrap_service) {
     struct in_addr ipv4;
@@ -389,6 +395,7 @@ pa_socket_server* pa_socket_server_new_i
     return NULL;
 }
 
+#ifdef HAVE_GETADDRINFO
 pa_socket_server* pa_socket_server_new_ipv6_string(pa_mainloop_api *m, const char *name, uint16_t port, const char *tcpwrap_service) {
     struct in6_addr ipv6;
 
@@ -401,6 +408,7 @@ pa_socket_server* pa_socket_server_new_i
 
     return NULL;
 }
+#endif
 
 static void socket_server_free(pa_socket_server*s) {
     pa_assert(s);
@@ -441,6 +449,7 @@ char *pa_socket_server_get_address(pa_so
     pa_assert(l > 0);
 
     switch (s->type) {
+#ifdef HAVE_GETADDRINFO
         case SOCKET_SERVER_IPV6: {
             struct sockaddr_in6 sa;
             socklen_t sa_len = sizeof(sa);
@@ -476,6 +485,7 @@ char *pa_socket_server_get_address(pa_so
 
             return c;
         }
+#endif
 
         case SOCKET_SERVER_IPV4: {
             struct sockaddr_in sa;
--- origsrc/pulseaudio-0.9.14/src/pulsecore/socket-util.c	2009-01-12 17:10:34.000000000 -0600
+++ src/pulseaudio-0.9.14/src/pulsecore/socket-util.c	2009-03-03 21:42:12.007875000 -0600
@@ -61,6 +61,11 @@
 #include <arpa/inet.h>
 #endif
 
+#ifndef HAVE_GETADDRINFO
+#include <dummyin6.h>
+#include <getaddrinfo.h>
+#endif
+
 #ifndef HAVE_INET_NTOP
 #include "inet_ntop.h"
 #endif
@@ -294,8 +299,10 @@ pa_bool_t pa_socket_address_is_local(con
         case AF_INET:
             return ((const struct sockaddr_in*) sa)->sin_addr.s_addr == INADDR_LOOPBACK;
 
+#ifdef HAVE_GETADDRINFO
         case AF_INET6:
             return memcmp(&((const struct sockaddr_in6*) sa)->sin6_addr, &in6addr_loopback, sizeof(struct in6_addr)) == 0;
+#endif
 
         default:
             return FALSE;
--- origsrc/pulseaudio-0.9.14/src/pulsecore/time-smoother.c	2009-01-12 17:10:34.000000000 -0600
+++ src/pulseaudio-0.9.14/src/pulsecore/time-smoother.c	2009-03-03 21:44:47.695375000 -0600
@@ -32,6 +32,10 @@
 
 #include "time-smoother.h"
 
+#ifdef __CYGWIN__
+#define llrint(x) rint(x)
+#endif
+
 #define HISTORY_MAX 64
 
 /*
--- origsrc/pulseaudio-0.9.14/src/tests/ipacl-test.c	2009-01-12 17:10:34.000000000 -0600
+++ src/pulseaudio-0.9.14/src/tests/ipacl-test.c	2009-03-03 22:39:41.070375000 -0600
@@ -30,7 +30,9 @@
 
 int main(int argc, char *argv[]) {
     struct sockaddr_in sa;
+#ifdef HAVE_GETADDRINFO
     struct sockaddr_in6 sa6;
+#endif
     int fd;
     int r;
     pa_ip_acl *acl;
@@ -87,6 +89,7 @@ int main(int argc, char *argv[]) {
 
     close(fd);
 
+#ifdef HAVE_GETADDRINFO
     fd = socket(PF_INET6, SOCK_STREAM, 0);
     assert(fd >= 0);
 
@@ -129,6 +132,7 @@ int main(int argc, char *argv[]) {
     pa_ip_acl_free(acl);
 
     close(fd);
+#endif
 
     return 0;
 }
--- origsrc/pulseaudio-0.9.14/src/utils/padsp.c	2009-01-12 17:10:34.000000000 -0600
+++ src/pulseaudio-0.9.14/src/utils/padsp.c	2009-03-03 21:48:20.617250000 -0600
@@ -140,6 +140,10 @@ static inline fnptr dlsym_fn(void *handl
     return (fnptr) (long) dlsym(handle, symbol);
 }
 
+#ifdef __CYGWIN__
+#define RTLD_NEXT dlopen("cygwin1.dll", RTLD_LAZY)
+#endif
+
 #define LOAD_IOCTL_FUNC() \
 do { \
     pthread_mutex_lock(&func_mutex); \
@@ -2311,7 +2315,7 @@ fail:
     return ret;
 }
 
-#ifdef sun
+#if defined(sun) || defined(__CYGWIN__)
 int ioctl(int fd, int request, ...) {
 #else
 int ioctl(int fd, unsigned long request, ...) {
