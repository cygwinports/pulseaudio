--- origsrc/pulseaudio-0.9.6/configure.ac	2007-05-27 15:58:31.000000000 -0500
+++ src/pulseaudio-0.9.6/configure.ac	2007-07-31 11:11:32.279824800 -0500
@@ -180,7 +180,11 @@
 AC_CHECK_HEADERS([sys/filio.h])
 
 # Windows
-AC_CHECK_HEADERS([windows.h winsock2.h ws2tcpip.h])
+case "$host_os" in
+	mingw*)
+		AC_CHECK_HEADERS([windows.h winsock2.h ws2tcpip.h])
+		;;
+esac
 
 # Other
 AC_CHECK_HEADERS([sys/ioctl.h])
--- origsrc/pulseaudio-0.9.6/src/pulsecore/core-util.c	2007-05-25 15:35:33.000000000 -0500
+++ src/pulseaudio-0.9.6/src/pulsecore/core-util.c	2007-07-31 12:02:35.229000900 -0500
@@ -515,13 +515,17 @@
 
         if (sched_getparam(0, &sp) < 0) {
             pa_log("sched_getparam(): %s", pa_cstrerror(errno));
+#if defined(HAVE_SYS_CAPABILITY_H)
             goto fail;
+#endif
         }
 
         sp.sched_priority = 1;
         if (sched_setscheduler(0, SCHED_FIFO, &sp) < 0) {
             pa_log_warn("sched_setscheduler(): %s", pa_cstrerror(errno));
+#if defined(HAVE_SYS_CAPABILITY_H)
             goto fail;
+#endif
         }
 
         pa_log_info("Successfully enabled SCHED_FIFO scheduling.");
@@ -535,9 +539,8 @@
         pa_log_info("Successfully gained high priority class.");
 #endif
 
-fail:
-
 #if defined(HAVE_SYS_CAPABILITY_H)
+fail:
     if (caps) {
         /* Restore original caps */
         cap_set_proc(caps);
--- origsrc/pulseaudio-0.9.6/src/pulsecore/socket-client.c	2007-05-12 18:21:39.000000000 -0500
+++ src/pulseaudio-0.9.6/src/pulsecore/socket-client.c	2007-07-31 13:26:39.492008800 -0500
@@ -70,6 +70,19 @@
 
 #define CONNECT_TIMEOUT 5
 
+#ifdef __CYGWIN__
+struct addrinfo {
+    int ai_flags;
+    int ai_family;
+    int ai_socktype;
+    int ai_protocol;
+    socklen_t ai_addrlen;
+    char *ai_canonname;
+    struct sockaddr *ai_addr;
+    struct addrinfo *ai_next;
+};
+#endif
+
 struct pa_socket_client {
     int ref;
     pa_mainloop_api *mainloop;
@@ -261,9 +274,11 @@
             c->local = ((const struct sockaddr_in*) sa)->sin_addr.s_addr == INADDR_LOOPBACK;
             break;
 
+#ifdef AF_INET6
         case AF_INET6:
             c->local = memcmp(&((const struct sockaddr_in6*) sa)->sin6_addr, &in6addr_loopback, sizeof(struct in6_addr)) == 0;
             break;
+#endif
 
         default:
             c->local = 0;
@@ -275,7 +290,11 @@
     }
 
     pa_fd_set_cloexec(c->fd, 1);
-    if (sa->sa_family == AF_INET || sa->sa_family == AF_INET6)
+    if (sa->sa_family == AF_INET
+#ifdef AF_INET6
+        || sa->sa_family == AF_INET6
+#endif
+       )
         pa_socket_tcp_low_delay(c->fd);
     else
         pa_socket_low_delay(c->fd);
--- origsrc/pulseaudio-0.9.6/src/pulsecore/socket-server.c	2007-05-12 18:21:39.000000000 -0500
+++ src/pulseaudio-0.9.6/src/pulsecore/socket-server.c	2007-07-31 12:13:52.220167300 -0500
@@ -288,10 +288,12 @@
 
     assert(m && port);
 
+#ifdef PF_INET6
     if ((fd = socket(PF_INET6, SOCK_STREAM, 0)) < 0) {
         pa_log("socket(PF_INET6): %s", pa_cstrerror(errno));
         goto fail;
     }
+#endif
 
     pa_fd_set_cloexec(fd, 1);
 
--- origsrc/pulseaudio-0.9.6/src/pulsecore/socket-util.c	2007-05-12 18:21:39.000000000 -0500
+++ src/pulseaudio-0.9.6/src/pulsecore/socket-util.c	2007-07-31 12:10:20.187536300 -0500
@@ -96,7 +96,9 @@
         union {
             struct sockaddr sa;
             struct sockaddr_in in;
+#ifdef AF_INET6
             struct sockaddr_in6 in6;
+#endif
 #ifdef HAVE_SYS_UN_H
             struct sockaddr_un un;
 #endif
@@ -115,6 +117,7 @@
                          ip & 0xFF,
                          ntohs(sa.in.sin_port));
                 return;
+#ifdef AF_INET6
             } else if (sa.sa.sa_family == AF_INET6) {
                 char buf[INET6_ADDRSTRLEN];
                 const char *res;
@@ -124,6 +127,7 @@
                     snprintf(c, l, "TCP/IP client from [%s]:%u", buf, ntohs(sa.in6.sin6_port));
                     return;
                 }
+#endif
 #ifdef HAVE_SYS_UN_H
             } else if (sa.sa.sa_family == AF_UNIX) {
                 snprintf(c, l, "UNIX socket client");
